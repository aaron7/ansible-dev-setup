#########################
# zplug
#########################

# Check if zplug is installed
if [[ ! -d ~/.zplug ]]; then
  git clone https://github.com/zplug/zplug ~/.zplug
  source ~/.zplug/init.zsh && zplug update --self
fi

# Initialise zplug
source ~/.zplug/init.zsh

# syntax highlighting and substring search
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-history-substring-search"

# fish-like auto suggestions
zplug "zsh-users/zsh-autosuggestions", from:github

# extra auto completions
zplug "zsh-users/zsh-completions", from:github

# osx helpers
zplug "unixorn/tumult.plugin.zsh", from:github

# warn when running command you have an alias for
zplug "djui/alias-tips", from:github

# git helper scripts
zplug "unixorn/git-extra-commands", from:github

# sysadmin helpers
zplug "skx/sysadmin-util", from:github

# open branch/files in github
zplug "peterhurford/git-it-on.zsh", from:github

# Prezto theme and plugins
zstyle ':prezto:module:*' color 'yes'
zstyle ':prezto:module:*' case-sensitive 'no'
zstyle ':prezto:module:prompt' theme sorin
zplug "modules/prompt", from:prezto
zplug "modules/directory", from:prezto
zplug "modules/editor", from:prezto
zplug "modules/git", from:prezto
zplug "modules/history", from:prezto
zplug "modules/utility", from:prezto

# Install packages that have not been installed yet
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    else
        echo
    fi
fi

zplug load

#########################
# Scripts
#########################

# Kubectl autocomplete
source <(kubectl completion zsh)

# Tmuxinator autocomplete and mux alias
source ~/.tmuxinator/tmuxinator.zsh

# AWS CLI MFA
# Description: Creates the temp session profile <profile>-mfa if non-existent or expired
# Usage: awsmfa <profile>
# Setup:
#     Go to https://console.aws.amazon.com/iam/home#/users
#     search your username, click on it, go to the "Security credentials" tab,
#     and set the value for "Assigned MFA device" as the `aws_mfa_device_arn` key
#     in ~/.aws/credentials
function awsmfa() {
    if [[ -z "$1" ]]; then
        echo "Please provide the profile as the first argument"
        return 1
    fi

    local now=$(date +%s)
    local mfaProfile=${1}-mfa
    local mfaSessionExpDate=$(aws configure get aws_mfa_session_exp_date --profile $mfaProfile)
    if [[ -n $mfaSessionExpDate ]] && [[ $now -lt $mfaSessionExpDate ]]; then
        echo "AWS MFA already configured for this profile."
    else
        local mfaDeviceArn=$(aws configure get aws_mfa_device_arn --profile $1)
        echo "Enter your MFA device's code (6 digits) and press [ENTER]:"
        read tokenCode

        # Set temporary credentials under a new <profile>-mfa profile
        local credentials=$(aws sts get-session-token --profile $1 --serial-number "$mfaDeviceArn" --token-code "$tokenCode")
        aws configure set aws_access_key_id "$(echo "$credentials" | jq -r .Credentials.AccessKeyId)" --profile $mfaProfile
        aws configure set aws_secret_access_key "$(echo "$credentials" | jq -r .Credentials.SecretAccessKey)" --profile $mfaProfile
        aws configure set aws_session_token "$(echo "$credentials" | jq -r .Credentials.SessionToken)" --profile $mfaProfile
        mfaSessionExpDate=$(date -j -f "%Y-%m-%dT%H:%M:%SZ" $(echo "$credentials" | jq -r .Credentials.Expiration) +%s)
        aws configure set aws_mfa_session_exp_date $mfaSessionExpDate --profile $mfaProfile
    fi
    echo "Your session with profile "$mfaProfile" will expire at $(date -j -f "%s" $mfaSessionExpDate +"%Y-%m-%dT%H:%M:%SZ")."
}

#########################
# Aliases
#########################

# Alias git to github's hub without breaking completions
function git(){hub $@}

# hledger
alias hl=hledger

#########################
# Python
#########################

export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/Devel
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
source /usr/local/bin/virtualenvwrapper.sh

#########################
# Paths
#########################

# golang
export PATH=$PATH:$HOME/go/bin

# .local/bin
export PATH=$PATH:/Users/aaron/.local/bin

# arc
export PATH=$PATH:/Users/aaron/projects/arc/arcanist/bin

# pyenv
export PATH="/Users/aaron/.pyenv:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
